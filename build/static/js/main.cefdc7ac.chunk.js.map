{"version":3,"sources":["Counter.js","CounterHooks.js","App.js","index.js"],"names":["Counter","props","state","count","initialCount","console","log","ThemeContext","Consumer","style","onClick","changeCount","amount","this","setState","prevState","Component","CounterHooks","useState","setCount","useContext","prevCount","React","createContext","App","theme","setTheme","Provider","value","backgroundColor","prevTheme","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0LAKqBA,E,kDAEjB,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAEDC,MAAQ,CACTC,MAAOF,EAAMG,cAJH,E,qDAUT,IAAD,OAEJ,OADAC,QAAQC,IAAI,kBAGZ,aADI,CACHC,EAAaC,SAAd,UACK,SAAAC,GAAK,OACF,gCACA,wBAAQA,MAAOA,EAAOC,QAAS,kBAAM,EAAKC,aAAa,IAAvD,eACA,+BAAO,EAAKT,MAAMC,QAClB,wBAAQM,MAAOA,EAAOC,QAAS,kBAAM,EAAKC,YAAY,IAAtD,uB,kCAOAC,GAGRC,KAAKC,UAAU,SAAAC,GACX,MAAO,CAAEZ,MAAOY,EAAUZ,MAAQS,MAItCC,KAAKC,UAAU,SAAAC,GACX,MAAO,CAAEZ,MAAOY,EAAUZ,MAAQS,U,GArCTI,aCEtB,SAASC,EAAT,GAAsC,IAAfb,EAAc,EAAdA,aAYlCC,QAAQC,IAAI,wBAZoC,MAatBY,mBAASd,GAba,mBAazCD,EAbyC,KAalCgB,EAbkC,KAc1CV,EAAQW,qBAAWb,GACzB,OACA,gCACA,wBAAQE,MAAOA,EAAOC,QAAS,kBAAMS,GAAU,SAAAE,GAAS,OAAIA,EAAW,MAAvE,eACA,qCAAQlB,EAAR,OACA,wBAAQM,MAAOA,EAAOC,QAAS,kBAAMS,GAAU,SAAAE,GAAS,OAAIA,EAAY,MAAxE,kBCtBG,IAAMd,EAAee,IAAMC,gBA+BnBC,MA7Bf,WACEnB,QAAQC,IAAI,cADC,MAEaY,mBAAS,OAFtB,mBAENO,EAFM,KAECC,EAFD,KAIb,OAaA,cAZE,CAYDnB,EAAaoB,SAAd,CAAuBC,MAAO,CAACC,gBAAiBJ,GAAhD,oBAEE,cAAC,EAAD,CAASrB,aAAc,IAFzB,gBAIE,cAACa,EAAD,CAAcb,aAAc,IAC5B,wBAAQM,QAAS,kBAAMgB,GAAS,SAAAI,GAC9B,MAAqB,QAAdA,EAAsB,OAAS,UADxC,8BCxBJC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.cefdc7ac.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n//use curly braces to grab the named export\r\nimport {ThemeContext} from './App'\r\n\r\n/*Class component*/\r\nexport default class Counter extends Component{\r\n    \r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state = {\r\n            count: props.initialCount\r\n        }\r\n    }\r\n    \r\n\r\n    /*When you change state, it will only render component or child components*/\r\n    render(){\r\n        console.log(\"Render Counter\")\r\n        return (\r\n            //Consumer needs a function or else have an error\r\n        <ThemeContext.Consumer> \r\n            {style => (\r\n                <div>\r\n                <button style={style} onClick={() => this.changeCount(-1)}>-</button>\r\n                <span>{this.state.count}</span>\r\n                <button style={style} onClick={() => this.changeCount(+1)}>+</button>\r\n            </div>\r\n            )}\r\n        </ThemeContext.Consumer>\r\n        )\r\n    }\r\n\r\n    changeCount(amount){\r\n\r\n        // Function version of the state. Will always work in every scenario\r\n        this.setState( prevState => {\r\n            return { count: prevState.count + amount}\r\n        })\r\n\r\n        // Second call will increment again because it is calling the previous state\r\n        this.setState( prevState => {\r\n            return { count: prevState.count + amount}\r\n        })\r\n\r\n        /* Use when you don't need to reference previous state\r\n        this.setState({\r\n            count: this.state.count + amount\r\n        })\r\n        */\r\n\r\n        /*  Repeating this line of code again will run the same thing, because setState runs asynchronously       \r\n            Not increment anymore\r\n            this.setState({\r\n            count: this.state.count + amount\r\n        })  */\r\n    }\r\n}\r\n\r\n// <span>{this.props.initialCount}</span>","/*Hooks allow states to be used in function components */\r\n\r\nimport React, {useState, useContext} from 'react'\r\nimport { ThemeContext } from './App'\r\n\r\n//Object Deconstruction way, easier to read with few props\r\n//Functions cannot use states (not native), but a React hook can\r\nexport default function CounterHooks({initialCount}){\r\n    // useState returns a state as an array.\r\n    // first value returned is the actual state\r\n    // second value returned is the function that allows us to set the state\r\n    // need to use the previous state because setState runs asynchronously\r\n    // essentially running the same function over and over produces same result\r\n    // useState can take in an object ({ }) or a primitive type\r\n    // can use multiple useState calls in functional component unlike class components\r\n    // in class component, need to use an object full of states\r\n    // Hooks must be on the top line of the function, so it can keep track\r\n    // of all your states\r\n    // Only rerenders the component instead of the entire app\r\n    console.log('Render Counter Hooks')\r\n    const [count, setCount] = useState(initialCount)\r\n    const style = useContext(ThemeContext)\r\n    return(\r\n    <div>\r\n    <button style={style} onClick={() => setCount( prevCount => prevCount -1)}>-</button>\r\n    <span> {count} </span>\r\n    <button style={style} onClick={() => setCount( prevCount => prevCount + 1) }>+</button>\r\n    </div>\r\n    )\r\n}\r\n\r\n/*\r\nexport default function CounterHooks2(props){\r\n    return(\r\n        <div>\r\n            <button>+</button>\r\n            <span>{props.initialCount}</span>\r\n            <button>-</button>\r\n        </div>\r\n    )\r\n}*/\r\n\r\n/*\r\nexport default function CounterHooks({initialCount}){\r\n    const [state, setCount] = useState(initialCount)\r\n    return(\r\n    <div>\r\n    <button onClick={() => setState( prevState=> {\r\n    return ({count: prevState.count - 1})})}>-</button>\r\n    <span> {state.count} </span>\r\n    <button onClick={() => setState( prevState=>{ \r\n    return ({count: prevState.count + 1})})}>+</button>\r\n    </div>\r\n    )\r\n}\r\n*/","import React, {useState} from 'react';\nimport Counter from './Counter'\nimport CounterHooks from './CounterHooks'\n\nexport const ThemeContext = React.createContext()\n\nfunction App() {\n  console.log(\"Render App\")\n  const [theme, setTheme] = useState('red')\n  // .innerHTML / document.createElement('h1')\n  return ( \n    // wrapping with <div> will return both h1 and h3\n    //  <div>\n/*     <>\n    <h1>\n      Hello World\n    </h1>\n    <h3>Subtitle</h3>\n    </> */\n// </div>\n// JSX everything needs to have a closing tag or div\n// to return one object\n//always needs to have value attribute\n  <ThemeContext.Provider value={{backgroundColor: theme}}>\n  Counter\n    <Counter initialCount={0} />\n  Counter Hooks\n    <CounterHooks initialCount={5}></CounterHooks>\n    <button onClick={() => setTheme(prevTheme => {\n      return prevTheme === 'red' ? 'blue' : 'red' \n    })}>Toggle Theme</button>\n  </ThemeContext.Provider>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}